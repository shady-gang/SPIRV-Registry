SPV_SHADY_indirect_tail_calls
============================

Name Strings
------------

SPV_SHADY_indirect_tail_calls

Contact
-------

To report problems with this extension, please open a new issue at:

https://github.com/shady-gang/SPIRV-Headers

Contributors
------------

- Hugo Devillers, Saarland University
- Natalie Vock, Valve

Status
------

- First draft

Dependencies
------------

This extension is written against the SPIR-V Specification, Version 1.6 Revision 4.

This extension requires SPIR-V 1.0.

This extension interacts significantly with the experimental extension SPV_INTEL_function_pointers, available at 
https://github.com/intel/llvm/blob/sycl/sycl/doc/design/spirv-extensions/SPV_INTEL_function_pointers.asciidoc

Overview
--------

This extension adds tail-calls to shader to allow unstructured indirect jumps between subroutines in a shader.
It re-uses `OpConstantFunctionPointerINTEL` from `SPV_INTEL_function_pointers` to obtain pointers within a module or externally using the `ReferencedIndirectlyINTEL` decoration. This extension does not expose plain function pointer calls. See issues section.

Extension Name
--------------

To use this extension within a SPIR-V module, the following
*OpExtension* must be present in the module:

----
OpExtension "SPV_SHADY_indirect_tail_calls"
----

New Capabilities
----------------

This extension introduces new capabilities:

----
InModuleFunctionAddressSHADY
PhysicalFunctionAddressesSHADY
----

New Instructions
----------------

----
OpTypeNoReturnSHADY
OpIndirectTailCallSHADY
OpExitSHADY
----

Modifications to the SPIR-V Specification, Version 1.6
------------------------------------------------------

Terms
~~~~~

In section 2.2.5 "Control Flow", add *OpExitSHADY* and *OpIndirectTailCallSHADY* to the
*Termination Instruction* list.

Instructions
~~~~~~~~~~~~

In section 3.52.6 "Type-Declaration Instructions", add the new instructions:

[cols="1,2*3",width="100%"]
|=====
2+|*OpTypeNoReturnSHADY* +
 +
Continuation return type. +
 +
Continuations are functions that never return, they can only be called. +
To declare a continuation function type, use *OpTypeNoReturnShady* as the Return Type for *OpTypeFunction*.
|Capability: +
*IndirectTailCallSHADY*
| 2 | 6592
 | <<ResultId,'Result <id>' >>
|=====

In section 3.52.17 "Control-Flow Instructions", add the new instructions:
--
[cols="1,3*3",width="100%"]
|=====
3+|*OpIndirectTailCallSHADY* +
 +
Performs an indirect tail call. +
 +
Function Pointer must be a pointer to a continuation type in the CodeSectionINTEL storage class. Function Pointer must be uniform. +
 +
This instruction must be the last instruction in a block. +
1+|Capability: +
*IndirectTailCallsSHADY*
| 2 + variable | 6594 | '<id>' +
'Function Pointer' |
'<id>, <id>, ..., <id>' 'Argument 0', 'Argument 1', ..., 'Argument N'
3+|*OpExitSHADY* +
 +
Ends the current invocation. +
 +
Ceases all further processing in any invocation that executes it: Only instructions these invocations executed before *OpExitSHADY* will have observable side effects. This is meant to behave like returning to an outermost function, control-flow may still be uniform for remaining invocations executing the program. +
 +
This instruction must be the last instruction in a block. +
1+|Capability: +
*IndirectTailCallsSHADY*
3+| 1 | 6593
|=====

--


Issues
------

1) Should we duplicate the SPV_INTEL_function_pointers ops and storage class ?

For now we do, and we'll ask Intel to work with us on an EXT.

2) What about non-indirect tailcalls ?

3) What about tail-calls that subsume the current function and can return to the original caller with values ?

TBD, might require real indirect function calls to be meaningful.

4) What is the behaviour of this extension in non-uniform control flow

TBD

Revision History
----------------

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|========================================
|Rev|Date|Author|Changes
|1|2024-10-27|Hugo Devillers|Initial revision
|========================================

